{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { fetchDevices } from \"../http/deviceAPI\"; // Import fetchDevices\n\nclass DeviceStore {\n  constructor() {\n    this._types = [];\n    this._brands = [];\n    this._devices = [];\n    this._allDevices = []; // Store all devices\n    this._selectedType = {};\n    this._selectedBrand = {};\n    this._page = 1;\n    this._totalCount = 0;\n    this._limit = 3;\n    this._searchTerm = '';\n    makeAutoObservable(this);\n    this.loadInitialDevices(); // Load all devices on store creation\n  }\n\n  // Load all devices initially\n  async loadInitialDevices() {\n    try {\n      const data = await fetchDevices(null, null, 1, 10000); // Fetch all devices\n      runInAction(() => {\n        this._allDevices = data.rows;\n        this._devices = data.rows;\n        this._totalCount = data.count;\n      });\n    } catch (e) {\n      console.error(\"Error loading initial devices:\", e);\n    }\n  }\n  setTypes(types) {\n    this._types = types;\n  }\n  setBrands(brands) {\n    this._brands = brands;\n  }\n  setDevices(devices) {\n    this._devices = devices;\n  }\n  setSelectedType(type) {\n    this.setPage(1);\n    this._selectedType = type;\n  }\n  setSelectedBrand(brand) {\n    this.setPage(1);\n    this._selectedBrand = brand;\n  }\n  setPage(page) {\n    this._page = page;\n  }\n  setTotalCount(count) {\n    this._totalCount = count;\n  }\n  setSearchTerm(term) {\n    this._searchTerm = term;\n    this.setPage(1);\n  }\n  resetFilters() {\n    this._selectedType = {};\n    this._selectedBrand = {};\n    this._page = 1;\n    this._searchTerm = '';\n  }\n  get types() {\n    return this._types;\n  }\n  get brands() {\n    return this._brands;\n  }\n  get devices() {\n    let filteredDevices = this._allDevices; // Start with all devices\n\n    if (this._selectedType.id) {\n      filteredDevices = filteredDevices.filter(device => device.typeId === this._selectedType.id);\n    }\n    if (this._selectedBrand.id) {\n      filteredDevices = filteredDevices.filter(device => device.brandId === this._selectedBrand.id);\n    }\n    if (this._searchTerm) {\n      filteredDevices = filteredDevices.filter(device => device.name.toLowerCase().includes(this._searchTerm.toLowerCase()));\n    }\n\n    // Pagination\n    const start = (this._page - 1) * this._limit;\n    const end = start + this._limit;\n    return filteredDevices.slice(start, end);\n  }\n  get selectedType() {\n    return this._selectedType;\n  }\n  get selectedBrand() {\n    return this._selectedBrand;\n  }\n  get page() {\n    return this._page;\n  }\n  get totalCount() {\n    return this._allDevices.length; // Total count is now the length of all devices\n  }\n  get limit() {\n    return this._limit;\n  }\n  get searchTerm() {\n    return this._searchTerm;\n  }\n}\nexport default DeviceStore;","map":{"version":3,"names":["makeAutoObservable","runInAction","fetchDevices","DeviceStore","constructor","_types","_brands","_devices","_allDevices","_selectedType","_selectedBrand","_page","_totalCount","_limit","_searchTerm","loadInitialDevices","data","rows","count","e","console","error","setTypes","types","setBrands","brands","setDevices","devices","setSelectedType","type","setPage","setSelectedBrand","brand","page","setTotalCount","setSearchTerm","term","resetFilters","filteredDevices","id","filter","device","typeId","brandId","name","toLowerCase","includes","start","end","slice","selectedType","selectedBrand","totalCount","length","limit","searchTerm"],"sources":["C:/ShareLib/Курсач/online-store-bit-tech/client/src/components/Pages.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { fetchDevices } from \"../http/deviceAPI\"; // Import fetchDevices\r\n\r\nclass DeviceStore {\r\n    constructor() {\r\n        this._types = [];\r\n        this._brands = [];\r\n        this._devices = [];\r\n        this._allDevices = []; // Store all devices\r\n        this._selectedType = {};\r\n        this._selectedBrand = {};\r\n        this._page = 1;\r\n        this._totalCount = 0;\r\n        this._limit = 3;\r\n        this._searchTerm = '';\r\n        makeAutoObservable(this);\r\n\r\n        this.loadInitialDevices(); // Load all devices on store creation\r\n    }\r\n\r\n    // Load all devices initially\r\n    async loadInitialDevices() {\r\n        try {\r\n            const data = await fetchDevices(null, null, 1, 10000); // Fetch all devices\r\n            runInAction(() => {\r\n                this._allDevices = data.rows;\r\n                this._devices = data.rows;\r\n                this._totalCount = data.count;\r\n            });\r\n        } catch (e) {\r\n            console.error(\"Error loading initial devices:\", e);\r\n        }\r\n    }\r\n\r\n    setTypes(types) {\r\n        this._types = types;\r\n    }\r\n    setBrands(brands) {\r\n        this._brands = brands;\r\n    }\r\n    setDevices(devices) {\r\n        this._devices = devices;\r\n    }\r\n\r\n    setSelectedType(type) {\r\n        this.setPage(1);\r\n        this._selectedType = type;\r\n    }\r\n    setSelectedBrand(brand) {\r\n        this.setPage(1);\r\n        this._selectedBrand = brand;\r\n    }\r\n\r\n    setPage(page) {\r\n        this._page = page;\r\n    }\r\n    setTotalCount(count) {\r\n        this._totalCount = count;\r\n    }\r\n\r\n    setSearchTerm(term) {\r\n        this._searchTerm = term;\r\n        this.setPage(1);\r\n    }\r\n\r\n    resetFilters() {\r\n        this._selectedType = {};\r\n        this._selectedBrand = {};\r\n        this._page = 1;\r\n        this._searchTerm = '';\r\n    }\r\n\r\n    get types() {\r\n        return this._types;\r\n    }\r\n    get brands() {\r\n        return this._brands;\r\n    }\r\n    get devices() {\r\n        let filteredDevices = this._allDevices; // Start with all devices\r\n\r\n        if (this._selectedType.id) {\r\n            filteredDevices = filteredDevices.filter(device => device.typeId === this._selectedType.id);\r\n        }\r\n        if (this._selectedBrand.id) {\r\n            filteredDevices = filteredDevices.filter(device => device.brandId === this._selectedBrand.id);\r\n        }\r\n\r\n        if (this._searchTerm) {\r\n            filteredDevices = filteredDevices.filter(device =>\r\n                device.name.toLowerCase().includes(this._searchTerm.toLowerCase())\r\n            );\r\n        }\r\n\r\n        // Pagination\r\n        const start = (this._page - 1) * this._limit;\r\n        const end = start + this._limit;\r\n        return filteredDevices.slice(start, end);\r\n    }\r\n\r\n    get selectedType() {\r\n        return this._selectedType;\r\n    }\r\n    get selectedBrand() {\r\n        return this._selectedBrand;\r\n    }\r\n\r\n    get page() {\r\n        return this._page;\r\n    }\r\n    get totalCount() {\r\n        return this._allDevices.length; // Total count is now the length of all devices\r\n    }\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n\r\n    get searchTerm() {\r\n        return this._searchTerm;\r\n    }\r\n}\r\n\r\nexport default DeviceStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}